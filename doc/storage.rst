Storage
*******

Object properties data is stored into storages. You may define one or multiple
storages, each property can be :doc:`mapped <map>` only to the single storage.

E.g. you may store part of the object data into files and some values in RDBMS
database.

You may use ready-made storage classes or create your own.

.. contents::

Defining storages
=================

.. code:: python

   import smartobject

   # define default storage
   smartobject.define_storage(smartobject.JSONStorage())

   # define another file storage with id "stor2"
   storage2 = smartobject.MessagePackStorage()
   # raise errors if data file is not found
   storage2.allow_empty = False
   smartobject.define_storage(storage2, 'stor2')

   # define key-value storage with id "redis1"
   smartobject.define_storage(smartobject.RedisStorage(), 'redis1')

   # get storage object
   r = smartobject.get_storage('redis1')

   # purge deleted objects in all storages
   smartobject.purge()

.. automodule:: smartobject.storage

File-based storage
==================

File-based storages can not handle properties, marked as "external".

JSON
----

.. autoclass:: JSONStorage
   :members:
   :inherited-members:
   :show-inheritance:

YAML
----

.. autoclass:: YAMLStorage
   :members:
   :inherited-members:
   :show-inheritance:

Pickle
------

.. autoclass:: PickleStorage
   :members:
   :inherited-members:
   :show-inheritance:

MessagePack
-----------

.. autoclass:: MessagePackStorage
   :members:
   :inherited-members:
   :show-inheritance:

CBOR
----

.. autoclass:: CBORStorage
   :members:
   :inherited-members:
   :show-inheritance:

Database storages
=================

RDBMS
-----

`SQLAlchemy <https://www.sqlalchemy.org/>`_-based storage.

.. autoclass:: SQLAStorage
   :members:
   :inherited-members:
   :show-inheritance:

Key-value
---------

`Redis <https://redis.io/>`_-based storage.

.. autoclass:: RedisStorage
   :members:
   :inherited-members:
   :show-inheritance:

Custom storages
===============

You may use the following classes as prototypes for the own storages:

.. autoclass:: AbstractStorage
   :members:
   :inherited-members:
   :show-inheritance:

.. autoclass:: AbstractFileStorage
   :members:
   :show-inheritance:

Loading all objects from storage
================================

Sometimes it's useful to preload all objects of the certain type. To make this
possible, storages have *load_all()* method, which returns data for all objects
in the specified storage.

The data is returned as list generator, where each item is a dict with fields
"data" - contains object data, and "info" - contains additional object info
(e.g. file name the object is loaded from). "info" usually should be passed to
object *after_load()* method as kwargs.

:doc:`SmartObject factory <factory>` allows to do this in a few lines of code:

.. code:: python

   factory = smartobject.SmartObjectFactory(MyObjClass, autosave=True)
   # if no storage_id arg is specified, objects are loaded from the default
   # storage
   factory.load_all()

Auto-generated primary keys
===========================

Both RDBMS and file storages support auto-generated primary keys. For RDBMS,
keys are generated by SQL server (key is auto-incremented integer field). For
file storages, key are generated as UUIDs.

When object with null primary key field is being saved for the first time,
SmartObject tries to obtain and set primary key field from storage.

To simplify this, you may create :doc:`SmartObject factory <factory>` with
*autosave=True* argument: all objects, created by this factory, will be
auto-saved as soon as created.

.. code:: python

   factory = smartobject.SmartObjectFactory(MyObjClass, autosave=True)
   # the new object is automatically saved and its primary key is set from the
   # storage
   obj = factory.create()

Storage cleanup
===============

Sometimes storage may contain orphaned objects. To clean them, it has
*cleanup(pks)* method, where *pks* is a list of object primary keys to leave,
while all other objects will be removed.

if you use :doc:`SmartObject factory <factory>`, you may use its
*cleanup(storage_id)* method as well. The method removes all objects from the
specified storage, except the objects in factory.
